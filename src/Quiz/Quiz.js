import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import "./Quiz.css";

const Quiz = () => {
  const [answers, setAnswers] = useState({});
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [showResult, setShowResult] = useState(false);
  const [hearts, setHearts] = useState(Array(5).fill("ü§ç")); // 5 –±—ñ–ª–∏—Ö —Å–µ—Ä–¥–µ—á–æ–∫

  const navigate = useNavigate();

  const questions = [
    {
      question: "–ù–∞—à –ø–µ—Ä—à–∏–π –ø–æ—Ü—ñ–ª—É–Ω–æ–∫ (–≤—ñ–¥–Ω–æ—Å–Ω–æ –ø–æ—á–∞—Ç–∫—É —Å—Ç–æ—Å—É–Ω–∫—ñ–≤)",
      options: ["–ß–µ—Ä–µ–∑ –¥–µ–Ω—å", "–ó–∞ —Ç–∏–∂–¥–µ–Ω—å", "–ß–µ—Ä–µ–∑ –º—ñ—Å—è—Ü—å", "–ó–∞ 3 –¥–Ω—ñ"],
      correctAnswer: "–ß–µ—Ä–µ–∑ –º—ñ—Å—è—Ü—å",
      type: "multiple",
    },
    {
      question: "–ù–∞—à–∞ –ø–µ—Ä—à–∞ –ø–æ—ó–∑–¥–∫–∞",
      options: ["–ú—É–∫–∞—á–µ–≤–æ", "–ü—Ä–∞–≥–∞", "–•—É—Å—Ç", "–í–µ–ª–∏–∫–∏–π"],
      correctAnswer: "–ú—É–∫–∞—á–µ–≤–æ",
      type: "multiple",
    },
    {
      question: "–ú–æ—î —Å–ø—Ä–∞–≤–∂–Ω—î —ñ–º'—è",
      options: ["–Ñ–≤–≥–µ–Ω", "–õ—ñ–∑–∞", "–ñ–µ–Ω—è", "–ö–æ—Ç–∏–∫"],
      correctAnswer: "–ö–æ—Ç–∏–∫",
      type: "multiple",
    },
    {
      question: "–ö—É–¥–∏ –º–∏ —Ö–æ–¥–∏–ª–∏ –ø–µ—Ä–µ–¥ —Å—Ç–æ—Å—É–Ω–∫–∞–º–∏)",
      options: ["–ù–∞ –∫–∞–≤—É", "–ù–∞ —á–∞—é–≤–∞–Ω–Ω—è", "–í —Ç–∏—Å—É", "–í –ø–æ—Ö–æ–¥–∏"],
      correctAnswer: "–ù–∞ —á–∞—é–≤–∞–Ω–Ω—è",
      type: "multiple",
    },
    {
      question: "–°–∫—ñ–ª—å–∫–∏ –¥–Ω—ñ–≤ –º–∏ —Ä–∞–∑–æ–º",
      correctAnswer: "701",
      type: "input",
    },
  ];

  const isAnswerCorrect = (questionIndex, value) => {
    return value === questions[questionIndex].correctAnswer;
  };

  const handleAnswerChange = (questionIndex, value) => {
    setAnswers({ ...answers, [questionIndex]: value });

    setHearts((prevHearts) => {
      const newHearts = [...prevHearts];
      newHearts[questionIndex] = isAnswerCorrect(questionIndex, value) ? "‚ù§Ô∏è" : "üíî";
      return newHearts;
    });

    setTimeout(() => {
      if (currentQuestionIndex < questions.length - 1) {
        setCurrentQuestionIndex(currentQuestionIndex + 1);
      } else {
        calculateScore();
      }
    }, 500);
  };

  const handleInputKeyDown = (e) => {
    if (e.key === "Enter") {
      e.preventDefault(); // –ó–∞–ø–æ–±—ñ–≥–∞—î –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Ñ–æ—Ä–º–∏
      handleAnswerChange(currentQuestionIndex, answers[currentQuestionIndex] || "");
    }
  };

  const calculateScore = () => {
    setShowResult(true);
    setTimeout(() => {
      navigate("/enverlope");
    }, 2000);
  };

  return (
    <div className="quiz-container">
      <div className="hearts-container">
        {hearts.map((heart, index) => (
          <span key={index} className="heartt">{heart}</span>
        ))}
      </div>

      <form onSubmit={(e) => e.preventDefault()}> {/* –ó–∞–ø–æ–±—ñ–≥–∞—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—é —Å—Ç–æ—Ä—ñ–Ω–∫–∏ */}
        <div className="question">
          <p>{questions[currentQuestionIndex].question}</p>
          {questions[currentQuestionIndex].type === "multiple" ? (
            <div className="options">
              {questions[currentQuestionIndex].options.map((option, optionIndex) => (
                <label key={optionIndex}>
                  <input
                    type="radio"
                    name={`question${currentQuestionIndex}`}
                    value={option}
                    onChange={() => handleAnswerChange(currentQuestionIndex, option)}
                    checked={answers[currentQuestionIndex] === option}
                  />
                  {option}
                </label>
              ))}
            </div>
          ) : (
            <div className="input-answer">
              <input
                type="text"
                value={answers[currentQuestionIndex] || ""}
                onChange={(e) => setAnswers({ ...answers, [currentQuestionIndex]: e.target.value })}
                placeholder="–í–≤–µ–¥—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å"
                onKeyDown={handleInputKeyDown}
              />
            </div>
          )}
        </div>
      </form>

      {showResult && (
        <div className="result">
          <h2 className="result-text">–ó–∞—Å–ª—É–≥–æ–≤—É—î—à –Ω–∞ –ø–æ–¥–∞—Ä—É–Ω–æ–∫!</h2>
        </div>
      )}
    </div>
  );
};

export default Quiz;
